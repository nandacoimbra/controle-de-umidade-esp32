# üå± Monitoramento de Umidade de Planta ‚Äì ESP32

Firmware para o ESP32 que l√™ um sensor de umidade do solo resistivo (higr√¥metro) e disponibiliza os dados via servidor HTTP.  Funciona em conjunto com o frontend React (link para reposit√≥tio) para exibir leituras de umidade do solo a cada 15 min, ou quando o usu√°rio solicitar.

## Funcionalidades

- Conex√£o do ESP32 ao Wi-Fi
- Servidor HTTP embutido (porta 80)
- Endpoint `/umidade` para leitura atual (anal√≥gica) do sensor + timestamp
- Endpoint `/historico` para retornar todo o hist√≥rico de leitura salvo no SPIFFS (mem√≥ria flash)
- Endpoint `/limpar` (POST) para apagar todos os registros do hist√≥rico
- Armazenamento dos dados (umidade + timestamp) no SPIFFS (`/historico.txt`)
- Uso de NTP (Network Time Protocol) para sincronizar a data e hora
- Respostas em JSON para f√°cil consumo pelo frontend React

## Hardware Necess√°rio

- ESP32 DevKit (qualquer modelo compat√≠vel)
- Sensor de umidade do solo
- Conex√£o Wi-Fi

## Estrutura do C√≥digo

- **Leitura do sensor:** `analogRead(pinoSensorUmidade)`  

### Endpoints

- `GET /umidade` ‚Üí Retorna leitura atual + timestamp  
- `GET /historico` ‚Üí Retorna um array JSON com todas as leituras salvas  
- `POST /limpar` ‚Üí Limpa o hist√≥rico em mem√≥ria e no SPIFFS

## Como Usar

1. Clonar este reposit√≥rio  
```bash
git clone https://github.com/seu-usuario/esp32-umidade.git
cd esp32-umidade
```
2. Configurar Wi-Fi

No arquivo secrets.h, informe seu SSID e senha:
```bash
#define WIFI_SSID "SeuWiFi"
#define WIFI_PASSWORD "SuaSenha"

```
3. Instalar Bibliotecas Necess√°rias no Arduino IDE ou PlatformIO
- WiFi.h
- WebServer.h
- ESPmDNS.h
- SPIFFS.h
- NTPClient.h
- WiFiUdp.h

4. Upload do C√≥digo
- Conecte o ESP32 ao PC
- Abra o projeto no Arduino IDE ou VS Code + PlatformIO
- Selecione a porta correta e fa√ßa upload

5. Acessar o Servidor

Voc√™ pode acessar via:

- `http://<IP_do_ESP>/umidade`
- `http://<IP_do_ESP>/historico`
- `http://<IP_do_ESP>/limpar` (requisi√ß√£o POST)